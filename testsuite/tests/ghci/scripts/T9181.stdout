type family GHC.TypeLits.AppendSymbol (a :: GHC.Types.Symbol)
                                      (b :: GHC.Types.Symbol)
            :: GHC.Types.Symbol
type family GHC.TypeLits.CmpSymbol (a :: GHC.Types.Symbol)
                                   (b :: GHC.Types.Symbol)
            :: Ordering
data GHC.TypeLits.ErrorMessage where
  GHC.TypeLits.Text :: GHC.Types.Symbol -> GHC.TypeLits.ErrorMessage
  GHC.TypeLits.ShowType :: t -> GHC.TypeLits.ErrorMessage
  (GHC.TypeLits.:<>:) :: GHC.TypeLits.ErrorMessage
                         -> GHC.TypeLits.ErrorMessage -> GHC.TypeLits.ErrorMessage
  (GHC.TypeLits.:$$:) :: GHC.TypeLits.ErrorMessage
                         -> GHC.TypeLits.ErrorMessage -> GHC.TypeLits.ErrorMessage
class GHC.TypeLits.KnownSymbol (n :: GHC.Types.Symbol) where
  GHC.TypeLits.symbolSing :: GHC.TypeLits.SSymbol n
  {-# MINIMAL symbolSing #-}
data GHC.TypeLits.SomeSymbol where
  GHC.TypeLits.SomeSymbol :: GHC.TypeLits.KnownSymbol n =>
                             (Data.Proxy.Proxy n) -> GHC.TypeLits.SomeSymbol
type family GHC.TypeLits.TypeError (a :: GHC.TypeLits.ErrorMessage)
            :: b
GHC.TypeLits.natVal ::
  GHC.TypeNats.KnownNat n => proxy n -> Integer
GHC.TypeLits.natVal' ::
  GHC.TypeNats.KnownNat n => GHC.Prim.Proxy# n -> Integer
GHC.TypeLits.sameSymbol ::
  (GHC.TypeLits.KnownSymbol a, GHC.TypeLits.KnownSymbol b) =>
  Data.Proxy.Proxy a
  -> Data.Proxy.Proxy b -> Maybe (a Data.Type.Equality.:~: b)
GHC.TypeLits.someNatVal :: Integer -> Maybe GHC.TypeNats.SomeNat
GHC.TypeLits.someSymbolVal :: String -> GHC.TypeLits.SomeSymbol
GHC.TypeLits.symbolVal ::
  GHC.TypeLits.KnownSymbol n => proxy n -> String
GHC.TypeLits.symbolVal' ::
  GHC.TypeLits.KnownSymbol n => GHC.Prim.Proxy# n -> String
type family (GHC.TypeNats.*) (a :: GHC.Types.Nat)
                             (b :: GHC.Types.Nat)
            :: GHC.Types.Nat
type family (GHC.TypeNats.+) (a :: GHC.Types.Nat)
                             (b :: GHC.Types.Nat)
            :: GHC.Types.Nat
type family (GHC.TypeNats.-) (a :: GHC.Types.Nat)
                             (b :: GHC.Types.Nat)
            :: GHC.Types.Nat
type (GHC.TypeNats.<=) (x :: GHC.Types.Nat) (y :: GHC.Types.Nat) =
  (x GHC.TypeNats.<=? y) ~ 'True :: Constraint
type family (GHC.TypeNats.<=?) (a :: GHC.Types.Nat)
                               (b :: GHC.Types.Nat)
            :: Bool
type family GHC.TypeNats.CmpNat (a :: GHC.Types.Nat)
                                (b :: GHC.Types.Nat)
            :: Ordering
class GHC.TypeNats.KnownNat (n :: GHC.Types.Nat) where
  GHC.TypeNats.natSing :: GHC.TypeNats.SNat n
  {-# MINIMAL natSing #-}
data GHC.Types.Nat
data GHC.TypeNats.SomeNat where
  GHC.TypeNats.SomeNat :: GHC.TypeNats.KnownNat n =>
                          (Data.Proxy.Proxy n) -> GHC.TypeNats.SomeNat
data GHC.Types.Symbol
type family (GHC.TypeNats.^) (a :: GHC.Types.Nat)
                             (b :: GHC.Types.Nat)
            :: GHC.Types.Nat
GHC.TypeNats.sameNat ::
  (GHC.TypeNats.KnownNat a, GHC.TypeNats.KnownNat b) =>
  Data.Proxy.Proxy a
  -> Data.Proxy.Proxy b -> Maybe (a Data.Type.Equality.:~: b)
